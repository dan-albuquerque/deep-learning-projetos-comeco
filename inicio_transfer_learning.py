# -*- coding: utf-8 -*-
"""inicio_transfer_learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TNZyT6Zpo2SO_JKS2GWSoH7_EbsVmGt1

O projeto consiste em aplicar o m√©todo de Transfer Learning em uma rede de Deep Learning

Imports
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import matplotlib.pyplot as plt
import os

"""pegando os dados"""

import tensorflow_datasets as tfds

(train_ds, val_ds), info = tfds.load(
    "cats_vs_dogs",
    split=['train[:80%]', 'train[80%:]'],
    as_supervised=True,
    with_info=True
)
print(info)  # para ver detalhes

IMG_SIZE = (224, 224)

def format_image(image, label):
  image = tf.image.resize(image, IMG_SIZE)/255.0
  return image, label

train_ds = train_ds.map(format_image).shuffle(1000).batch(32).prefetch(buffer_size=tf.data.AUTOTUNE)
val_ds = val_ds.map(format_image).batch(32).prefetch(buffer_size=tf.data.AUTOTUNE)

base_model = tf.keras.applications.MobileNetV2(
    input_shape=IMG_SIZE+(3,), include_top=False, weights='imagenet'
)
base_model.trainable = False  # congelar pesos

for layer in base_model.layers[-1:]:
  layer.trainable = True

global_avg = layers.GlobalAveragePooling2D()(base_model.output)
output = layers.Dense(1, activation='sigmoid')(global_avg)

model = keras.Model(inputs=base_model.input, outputs=output)

model.compile(
    optimizer='adam',
    loss='binary_crossentropy',
    metrics=['accuracy']
)

history = model.fit(
    train_ds,
    validation_data=val_ds,
    epochs=2
)

model.evaluate(val_ds)